require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VmsController do
  fixtures :users, :vms

  before do
    login_user
  end

  # This should return the minimal set of attributes required to create a valid
  # Vm. As you add validations to Vm, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "hostname" => "MyString" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VmsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all vms as @vms", solr: true do
      vm = Vm.create! valid_attributes
      get :index, {}, valid_session
      assigns(:vms).should include(vm)
    end

    it "fulltext search 'user-name'" do
      get :index, {search: "user-name"}, valid_session
      Sunspot.session.should be_a_search_for(Vm)
      Sunspot.session.should have_search_params(:fulltext, "user-name")
      Sunspot.session.should have_search_params(:order_by, any_param)
      Sunspot.session.should have_search_params(:paginate, per_page: 30)
    end
  end

  describe "GET show" do
    it "assigns the requested vm as @vm" do
      vm = Vm.create! valid_attributes
      get :show, {:id => vm.to_param}, valid_session
      assigns(:vm).should eq(vm)
    end
  end

  describe "GET new" do
    it "assigns a new vm as @vm" do
      get :new, {}, valid_session
      assigns(:vm).should be_a_new(Vm)
    end
  end

  describe "GET edit" do
    it "assigns the requested vm as @vm" do
      vm = Vm.create! valid_attributes
      get :edit, {:id => vm.to_param}, valid_session
      assigns(:vm).should eq(vm)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Vm" do
        expect {
          post :create, {:vm => valid_attributes}, valid_session
        }.to change(Vm, :count).by(1)
      end

      it "assigns a newly created vm as @vm" do
        post :create, {:vm => valid_attributes}, valid_session
        assigns(:vm).should be_a(Vm)
        assigns(:vm).should be_persisted
      end

      it "redirects to the created vm" do
        post :create, {:vm => valid_attributes}, valid_session
        response.should redirect_to(Vm.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved vm as @vm" do
        # Trigger the behavior that occurs when invalid params are submitted
        Vm.any_instance.stub(:save).and_return(false)
        post :create, {:vm => { "hostname" => "invalid value" }}, valid_session
        assigns(:vm).should be_a_new(Vm)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Vm.any_instance.stub(:save).and_return(false)
        post :create, {:vm => { "hostname" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested vm" do
        vm = Vm.create! valid_attributes
        # Assuming there are no other vms in the database, this
        # specifies that the Vm created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Vm.any_instance.should_receive(:update).with({ "hostname" => "MyString" })
        put :update, {:id => vm.to_param, :vm => { "hostname" => "MyString" }}, valid_session
      end

      it "assigns the requested vm as @vm" do
        vm = Vm.create! valid_attributes
        put :update, {:id => vm.to_param, :vm => valid_attributes}, valid_session
        assigns(:vm).should eq(vm)
      end

      it "redirects to the vm" do
        vm = Vm.create! valid_attributes
        put :update, {:id => vm.to_param, :vm => valid_attributes}, valid_session
        response.should redirect_to(vm)
      end
    end

    describe "with invalid params" do
      it "assigns the vm as @vm" do
        vm = Vm.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Vm.any_instance.stub(:save).and_return(false)
        put :update, {:id => vm.to_param, :vm => { "hostname" => "invalid value" }}, valid_session
        assigns(:vm).should eq(vm)
      end

      it "re-renders the 'edit' template" do
        vm = Vm.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Vm.any_instance.stub(:save).and_return(false)
        put :update, {:id => vm.to_param, :vm => { "hostname" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested vm" do
      vm = Vm.create! valid_attributes
      expect {
        delete :destroy, {:id => vm.to_param}, valid_session
      }.to change(Vm, :count).by(-1)
    end

    it "redirects to the the previous url" do
      vm = Vm.create! valid_attributes
      delete :destroy, {:id => vm.to_param}, valid_session
      response.should redirect_to(vms_path)
    end
  end

  describe "GET continue_using" do
    before do
      @valid_attributes = valid_attributes
      @valid_attributes.store("active_state",Vm::STATE_UNUSED)
      VmsController.any_instance.stub(:judge_key).and_return(true)
    end

    it "change vm.active_state to STATE_ACTIVE" do
      vm = Vm.create! @valid_attributes
      expect {
        get :continue_using, {:id => vm.to_param}, valid_session
      }.to change{Vm.find(vm.id).active_state}.from(Vm::STATE_UNUSED).to(Vm::STATE_ACTIVE)
    end
  end

  describe "GET stop_using" do
    before do
      @valid_attributes = valid_attributes
      @valid_attributes.store("active_state",Vm::STATE_ACTIVE)
      VmsController.any_instance.stub(:judge_key).and_return(true)
    end

    it "change vm.active_state to STATE_UNUSED" do
      vm = Vm.create! @valid_attributes
      expect {
      get :stop_using, {:id => vm.to_param}, valid_session
      }.to change{Vm.find(vm.id).active_state}.from(Vm::STATE_ACTIVE).to(Vm::STATE_UNUSED)
    end
  end

end
